/* See COPYRIGHT for copyright information. */

#include <inc/x86.h>
#include <inc/error.h>
#include <inc/string.h>
#include <inc/assert.h>

#include <kern/env.h>
#include <kern/pmap.h>
#include <kern/trap.h>
#include <kern/syscall.h>
#include <kern/console.h>
#include <kern/sched.h>

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	// Get the environment from the envs array using envid2env. 
	
	int r;
	struct Env *e;
	// Gets a pointer to the environment basedin envid from curenv (the one we are currently in). 
	// Anoother possibility to use curenv: A single environment always has both a kernel and a user space. The user always kicks the interrupt into the kernel from the same environment. 
	if ((r = envid2env(curenv->env_id, &e, 1)) < 0) {
		panic("sys_cputs: Correct environment cannot be found. Error: %e \n", r);
	}
	user_mem_assert(e, s, len, PTE_U | PTE_P); 

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
}

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
	return cons_getc();
}

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
	return curenv->env_id;
}

// Destroy a given environment (possibly the currently running environment).
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
		return r;
	if (e == curenv)
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
	else
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
	env_destroy(e);
	return 0;
	//env_destroy(e);
	//return 0;
}

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
	sched_yield();
}

// Allocate a new environment.
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
	// Create the new environment with env_alloc(), from kern/env.c.
	// It should be left as env_alloc created it, except that
	// status is set to ENV_NOT_RUNNABLE, and the register set is copied
	// from the current environment -- but tweaked so sys_exofork
	// will appear to return 0.

	// LAB 4: Your code here.
	
	// Create a new environment. By creating a new runnable environment, the child environmet will be eventually run by scheduler. 
	struct Env *newenv; 
	int error = env_alloc(&newenv, curenv->env_id);
	if (error < 0) {
		return error; 
	}
	
	// Copy over the registers, tweak the return value, and set to not_runnable. 
	newenv->env_status = ENV_NOT_RUNNABLE; 
	newenv->env_tf = curenv->env_tf; 
	
	// Make sure that the environments are manipulated to return the correct value. 
	// Trick child environment to return 0. 
	newenv->env_tf.tf_regs.reg_eax = 0; 

	// Parent environment returns envid_t of newly created environemnt. 
	return newenv->env_id; 
	
	
}

// Set envid's env_status to status, which must be ENV_RUNNABLE
// or ENV_NOT_RUNNABLE.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
	// Hint: Use the 'envid2env' function from kern/env.c to translate an
	// envid to a struct Env.
	// You should set envid2env's third argument to 1, which will
	// check whether the current environment has permission to set
	// envid's status.

	// LAB 4: Your code here.
	if(status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE) {
		return -E_INVAL;
	}
	
	struct Env *env_store;
	int error = envid2env(envid, &env_store, 1); 
	if (error < 0) {
		return error; 
	}
	
	env_store->env_status = status; 
	
	return 0; 
	
}

// Set envid's trap frame to 'tf'.
// tf is modified to make sure that user environments always run at code
// protection level 3 (CPL 3) with interrupts enabled.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
	// LAB 5: Your code here.
	// Remember to check whether the user has supplied us with a good
	// address!
	panic("sys_env_set_trapframe not implemented");
}

// Set the page fault upcall for 'envid' by modifying the corresponding struct
// Env's 'env_pgfault_upcall' field.  When 'envid' causes a page fault, the
// kernel will push a fault record onto the exception stack, then branch to
// 'func'.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
	// LAB 4: Your code here.
	struct Env *env_store;
	int error = envid2env(envid, &env_store, 1); 
	if (error < 0) {
		return error; 
	}
	
	env_store->env_pgfault_upcall = func; 
	
	return 0; 
	
	
}

// Allocate a page of memory and map it at 'va' with permission
// 'perm' in the address space of 'envid'.
// The page's contents are set to 0.
// If a page is already mapped at 'va', that page is unmapped as a
// side effect.
//
// perm -- PTE_U | PTE_P must be set, PTE_AVAIL | PTE_W may or may not be set,
//         but no other bits may be set.  See PTE_SYSCALL in inc/mmu.h.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
	// Hint: This function is a wrapper around page_alloc() and
	//   page_insert() from kern/pmap.c.
	//   Most of the new code you write should be to check the
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	// LAB 4: Your code here.
	
	//Get the env structure for envid. 
	struct Env *env_store;
	int error = envid2env(envid, &env_store, 1); 
	if (error < 0) {
		return error; 
	}
	
	if (((perm & ~PTE_SYSCALL) != 0) || ((perm & (PTE_U | PTE_P)) != (PTE_U | PTE_P))) {
		return -E_INVAL;
	} 
	
	if (((uintptr_t) va) >= UTOP) {
		return -E_INVAL; 
	}
	
	if (((uintptr_t) va)%PGSIZE != 0 ) {
		return -E_INVAL;
	}
	
	struct PageInfo *newpage = page_alloc(ALLOC_ZERO); 
	if (!newpage) {
		return -E_NO_MEM; 
	} 
	
	error = page_insert(env_store->env_pgdir, newpage, va, perm); 
	if (error) {
		page_free(newpage);
		return error; 
	}
	
	return 0; 
}

// Map the page of memory at 'srcva' in srcenvid's address space
// at 'dstva' in dstenvid's address space with permission 'perm'.
// Perm has the same restrictions as in sys_page_alloc, except
// that it also must not grant write access to a read-only
// page.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if srcenvid and/or dstenvid doesn't currently exist,
//		or the caller doesn't have permission to change one of them.
//	-E_INVAL if srcva >= UTOP or srcva is not page-aligned,
//		or dstva >= UTOP or dstva is not page-aligned.
//	-E_INVAL is srcva is not mapped in srcenvid's address space.
//	-E_INVAL if perm is inappropriate (see sys_page_alloc).
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
	// Hint: This function is a wrapper around page_lookup() and
	//   page_insert() from kern/pmap.c.
	//   Again, most of the new code you write should be to check the
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	
	// Checking env
	struct Env *env_src;
	int error = envid2env(srcenvid, &env_src, 1); 
	if (error < 0) {
		return error; 
	}
	
	struct Env *env_dst;
	error = envid2env(dstenvid, &env_dst, 1); 
	if (error < 0) {
		return error; 
	}
	
	// Checking srcva in Layout
	if (((uintptr_t) srcva) >= UTOP) {
		return -E_INVAL; 
	}
	
	if (((uintptr_t) srcva)%PGSIZE != 0 ) {
		return -E_INVAL;
	}
	
	// Checking dstva in Layout
	if (((uintptr_t) dstva) >= UTOP) {
		return -E_INVAL; 
	}
	
	if (((uintptr_t) dstva)%PGSIZE != 0 ) {
		return -E_INVAL;
	}
	
	// Checking basic permissions
	if (((perm & ~PTE_SYSCALL) != 0) || ((perm & (PTE_U | PTE_P)) != (PTE_U | PTE_P))) {
		return -E_INVAL;
	} 
	
	pte_t *pte_src; 
	struct PageInfo * page_src = page_lookup(env_src->env_pgdir, srcva, &pte_src); 
	if (page_src == NULL) {
	 return -E_INVAL; 
	}
	
	// Checking sys_page_map specific permissions 
	if (!(*pte_src & PTE_W)) {
		if (perm & PTE_W) {
			return -E_INVAL; 
		}
	}
	


	error = page_insert(env_dst->env_pgdir, page_src, dstva, perm); 
	if (error < 0) {
		return error; 
	}
 
	return 0; 
	
}

// Unmap the page of memory at 'va' in the address space of 'envid'.
// If no page is mapped, the function silently succeeds.
//
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	
	//Get the env structure for envid. 
	struct Env *env_store;
	int error = envid2env(envid, &env_store, 1); 
	if (error < 0) {
		return error; 
	}
	
	if (((uintptr_t) va) >= UTOP) {
		return -E_INVAL; 
	}
	
	if (((uintptr_t) va)%PGSIZE != 0 ) {
		return -E_INVAL;
	}
	
	page_remove(env_store->env_pgdir, va); 

	return 0; 
}

// Try to send 'value' to the target env 'envid'.
// If srcva < UTOP, then also send page currently mapped at 'srcva',
// so that receiver gets a duplicate mapping of the same page.
//
// The send fails with a return value of -E_IPC_NOT_RECV if the
// target is not blocked, waiting for an IPC.
//
// The send also can fail for the other reasons listed below.
//
// Otherwise, the send succeeds, and the target's ipc fields are
// updated as follows:
//    env_ipc_recving is set to 0 to block future sends;
//    env_ipc_from is set to the sending envid;
//    env_ipc_value is set to the 'value' parameter;
//    env_ipc_perm is set to 'perm' if a page was transferred, 0 otherwise.
// The target environment is marked runnable again, returning 0
// from the paused sys_ipc_recv system call.  (Hint: does the
// sys_ipc_recv function ever actually return?)
//
// If the sender wants to send a page but the receiver isn't asking for one,
// then no page mapping is transferred, but no error occurs.
// The ipc only happens when no errors occur.
//
// Returns 0 on success, < 0 on error.
// Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist.
//		(No need to check permissions.)
//	-E_IPC_NOT_RECV if envid is not currently blocked in sys_ipc_recv,
//		or another environment managed to send first.
//	-E_INVAL if srcva < UTOP but srcva is not page-aligned.
//	-E_INVAL if srcva < UTOP and perm is inappropriate
//		(see sys_page_alloc).
//	-E_INVAL if srcva < UTOP but srcva is not mapped in the caller's
//		address space.
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in the
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
	// LAB 4: Your code here.
	//Get the env structure for envid. 
	struct Env *env_target;
	int error; 
	
	// Get the struct for the target environment. Do not check any permissinos. 
	if ((error = envid2env(envid, &env_target, 0)) <0) { 
		return error; 
	}
	
	// If the target environment isn't receiving, return error.
	if (!env_target->env_ipc_recving) {
		return -E_IPC_NOT_RECV; 
	}
	
	// Initialize perm to 0. Assume that page isn't sent. Update below as necessary. 
	env_target->env_ipc_perm = 0; 
	
	// Determine if we are sending a page. If we are, make appropriate checks, and then remap page at srcva to dstva.  
	uintptr_t srcva_int = (uintptr_t) srcva; 
	if ((srcva_int < UTOP) && ((uintptr_t) env_target->env_ipc_dstva < UTOP)) {
	
		// Return error if not page-aligned
		if (srcva_int%PGSIZE != 0 ) {
			return -E_INVAL; 
		}
	
		// Checking basic permissions
		if (((perm & ~PTE_SYSCALL) != 0) || ((perm & (PTE_U | PTE_P)) != (PTE_U | PTE_P))) {
			return -E_INVAL;
		} 
	
		pte_t *pte_src; 
		struct PageInfo * page_src = page_lookup(curenv->env_pgdir, srcva, &pte_src); 
		if (page_src == NULL) {
		 return -E_INVAL; 
		}
	
		// Checking write permissions on srce if user designates write permissions on send.  
		if (!(*pte_src & PTE_W)) {
			if (perm & PTE_W) {
				return -E_INVAL; 
			}
		}

		error = page_insert(env_target->env_pgdir, page_src, env_target->env_ipc_dstva, perm); 
		if (error < 0) {
			return error; 
		}
		
		//If sending the page was successful, make sure the pass the page permissions through the env structure. .  
		env_target->env_ipc_perm = perm;
	}
	
	
	// Send succeeds, and update target's ipc fields
	env_target->env_ipc_recving = 0; 
	env_target->env_ipc_from = curenv->env_id; 
	env_target->env_ipc_value = value; 
	env_target->env_status = ENV_RUNNABLE; 
	// Since sys_ipc_recv function never returns, we tell environment that the function was a success (through kernel control). 
	env_target->env_tf.tf_regs.reg_eax = 0; 
	
	// Success of sys_ipc_try_send. 
	return 0; 
	
}

// Block until a value is ready.  Record that you want to receive
// using the env_ipc_recving and env_ipc_dstva fields of struct Env,
// mark yourself not runnable, and then give up the CPU.
//
// If 'dstva' is < UTOP, then you are willing to receive a page of data.
// 'dstva' is the virtual address at which the sent page should be mapped.
//
// This function only returns on error, but the system call will eventually
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
	// LAB 4: Your code here.
	
	int r;
	struct Env *e;
	// Gets a pointer to the environment based on envid from curenv (the one we are currently in). 
	// This is done for extra sanity checks. More direct option is to use curenv directly. 
	if ((r = envid2env(curenv->env_id, &e, 1)) < 0) {
		panic("sys_ipc_recv: Current environment cannot be found. Error: %e \n", r);
	}
	
	// Check for dstva page-align error. 
	uintptr_t dstva_int = (uintptr_t) dstva; 
	if ((dstva_int < UTOP) && (dstva_int%PGSIZE != 0)) {
		warn("sys_ipc_recv: Va used to send page is below UTOP, but not page aligned");
		return -E_INVAL;
	}
	
	curenv->env_ipc_recving = 1; 
	// Indicate to sender where to map page to e sent. 
	curenv->env_ipc_dstva = dstva;
	// Mark as not runnable (block until receive the message). 
	curenv->env_status = ENV_NOT_RUNNABLE; 
	// Give up the CPU (to allw message to be sent to this CPU). 
	sched_yield();
	
	panic("The sys_ipc_recv function should not return on success (only on error). \n");
	return -100; 
}

static int
sys_change_priority(int priority)
{
	int error; 
	
	// Check to make sure correct priority range was sent. 
	if (priority < P0 || priority > P3) {
		return -E_INVAL; 
	}
	
	curenv->env_priority = priority; 
	
	return 0; 
}

// Dispatches to the correct kernel function, passing the arguments.
int32_t
syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
{
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.


	switch (syscallno) {
		case SYS_cputs : 
			sys_cputs((const char *) a1, a2); 
			return 0; 
		case SYS_cgetc : 
			return sys_cgetc();
		case SYS_getenvid : 
			return sys_getenvid();
		case SYS_env_destroy : 
			return sys_env_destroy((envid_t) a1);
		case SYS_page_alloc: 
			return sys_page_alloc((envid_t) a1, (void *) a2, (int) a3);
		case SYS_env_set_pgfault_upcall : 
			return sys_env_set_pgfault_upcall((envid_t) a1, (void *) a2); 
		case SYS_page_map: 
			return sys_page_map( (envid_t) a1, (void *) a2, (envid_t) a3, (void *) a4, (int) a5);
	  case SYS_page_unmap : 
	 		return sys_page_unmap((envid_t) a1, (void *) a2); 
	  case SYS_exofork : 
	  	return sys_exofork();
	  case SYS_env_set_status : 
	  	return sys_env_set_status((envid_t) a1, (int) a2);  
		case SYS_yield : 
			sys_yield();
			return 0; 
		case SYS_ipc_try_send : 
			return sys_ipc_try_send((envid_t) a1, (uint32_t) a2, (void *) a3, (unsigned) a4);
		case SYS_ipc_recv : 			
			return sys_ipc_recv((void *) a1);
		case SYS_change_priority : 
			return sys_change_priority((int) a1);  

		default:
			return -E_INVAL;
	}
}


